module testbench;
    // AND Gate Signals
    reg a_and, b_and;
    wire f_and;

    // OR Gate Signals
    reg a_or, b_or;
    wire f_or;

    // NOT Gate Signals
    reg a_not;
    wire f_not;

    // NAND Gate Signals
    reg a_nand, b_nand;
    wire f_nand;

    // NOR Gate Signals
    reg a_nor, b_nor;
    wire f_nor;

    // XOR Gate Signals
    reg a_xor, b_xor;
    wire f_xor;

    // Instantiate the AND gate
    and_gate uut_and (
        .a(a_and),
        .b(b_and),
        .f(f_and)
    );

    // Instantiate the OR gate
    or_gate uut_or (
        .a(a_or),
        .b(b_or),
        .f(f_or)
    );

    // Instantiate the NOT gate
    not_gate uut_not (
        .a(a_not),
        .f(f_not)
    );

    // Instantiate the NAND gate
    nand_gate uut_nand (
        .a(a_nand),
        .b(b_nand),
        .f(f_nand)
    );

    // Instantiate the NOR gate
    nor_gate uut_nor (
        .a(a_nor),
        .b(b_nor),
        .f(f_nor)
    );

    // Instantiate the XOR gate
    xor_gate uut_xor (
        .a(a_xor),
        .b(b_xor),
        .f(f_xor)
    );

    // Test procedure
    initial begin
        // Test AND Gate
        $display("Testing AND Gate");
        a_and = 0; b_and = 0; #10; 
        $display("Input: %b, %b | Output: %b", a_and, b_and, f_and);
        
        a_and = 0; b_and = 1; #10;
        $display("Input: %b, %b | Output: %b", a_and, b_and, f_and);
        
        a_and = 1; b_and = 0; #10;
        $display("Input: %b, %b | Output: %b", a_and, b_and, f_and);
        
        a_and = 1; b_and = 1; #10;
        $display("Input: %b, %b | Output: %b", a_and, b_and, f_and);

        // Test OR Gate
        $display("Testing OR Gate");
        a_or = 0; b_or = 0; #10;
        $display("Input: %b, %b | Output: %b", a_or, b_or, f_or);
        
        a_or = 0; b_or = 1; #10;
        $display("Input: %b, %b | Output: %b", a_or, b_or, f_or);
        
        a_or = 1; b_or = 0; #10;
        $display("Input: %b, %b | Output: %b", a_or, b_or, f_or);
        
        a_or = 1; b_or = 1; #10;
        $display("Input: %b, %b | Output: %b", a_or, b_or, f_or);

        // Test NOT Gate
        $display("Testing NOT Gate");
        a_not = 0; #10;
        $display("Input: %b | Output: %b", a_not, f_not);
        
        a_not = 1; #10;
        $display("Input: %b | Output: %b", a_not, f_not);

        // Test NAND Gate
        $display("Testing NAND Gate");
        a_nand = 0; b_nand = 0; #10; 
        $display("Input: %b, %b | Output: %b", a_nand, b_nand, f_nand);
        
        a_nand = 0; b_nand = 1; #10;
        $display("Input: %b, %b | Output: %b", a_nand, b_nand, f_nand);
        
        a_nand = 1; b_nand = 0; #10;
        $display("Input: %b, %b | Output: %b", a_nand, b_nand, f_nand);
        
        a_nand = 1; b_nand = 1; #10;
        $display("Input: %b, %b | Output: %b", a_nand, b_nand, f_nand);

        // Test NOR Gate
        $display("Testing NOR Gate");
        a_nor = 0; b_nor = 0; #10; 
        $display("Input: %b, %b | Output: %b", a_nor, b_nor, f_nor);
        
        a_nor = 0; b_nor = 1; #10;
        $display("Input: %b, %b | Output: %b", a_nor, b_nor, f_nor);
        
        a_nor = 1; b_nor = 0; #10;
        $display("Input: %b, %b | Output: %b", a_nor, b_nor, f_nor);
        
        a_nor = 1; b_nor = 1; #10;
        $display("Input: %b, %b | Output: %b", a_nor, b_nor, f_nor);

        // Test XOR Gate
        $display("Testing XOR Gate");
        a_xor = 0; b_xor = 0; #10;
        $display("Input: %b, %b | Output: %b", a_xor, b_xor, f_xor);
        
        a_xor = 0; b_xor = 1; #10;
        $display("Input: %b, %b | Output: %b", a_xor, b_xor, f_xor);
        
        a_xor = 1; b_xor = 0; #10;
        $display("Input: %b, %b | Output: %b", a_xor, b_xor, f_xor);
        
        a_xor = 1; b_xor = 1; #10;
        $display("Input: %b, %b | Output: %b", a_xor, b_xor, f_xor);

        $finish;
    end
endmodule
